API para construir as aulas e relatórios:

fetch("https://openrouter.ai/api/v1/chat/completions", {
  method: "POST",
  headers: {
    "Authorization": "Bearer <OPENROUTER_API_KEY>",
    "HTTP-Referer": "<YOUR_SITE_URL>", // Optional. Site URL for rankings on openrouter.ai.
    "X-Title": "<YOUR_SITE_NAME>", // Optional. Site title for rankings on openrouter.ai.
    "Content-Type": "application/json"
  },
  body: JSON.stringify({
    "model": "openai/gpt-oss-20b:free",
    "messages": [
      {
        "role": "user",
        "content": "What is the meaning of life?"
      }
    ]
  })
});


chave da API: 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


###############################################


API para transcrever áudio: 


import axios from "axios";
import fs from "fs-extra";

const baseUrl = "https://api.assemblyai.com";

const headers = {
  authorization: "<YOUR_API_KEY>",
};

async function transcribe() {
  try {
    // Use a publicly accessible URL:
    const audioFile = "https://assembly.ai/sports_injuries.mp3";

    // Or upload a local file
    /*     
    let uploadUrl

         try {
          const audio = './audio/audio.mp3'
          const audioData = await fs.readFile(audio)
          const uploadResponse = await axios.post(`${baseUrl}/v2/upload`, audioData, { headers })
          uploadUrl = uploadResponse.data.upload_url

         } catch(error) {
          console.error("Error from '/upload' request:", error.response?.data || error.response || error);
         } 
         */

    const data = {
      audio_url: audioFile // For local files use: audio_url: uploadUrl
    };

    const url = `${baseUrl}/v2/transcript`;
    let transcriptId;

    try {
      const transcriptResponse = await axios.post(url, data, { headers });
      transcriptId = transcriptResponse.data.id;
    } catch (error) {
      console.error(
        "Error from POST '/transcript' request:",
        error.response.data.error || error
      );
    }

    const pollingEndpoint = `${baseUrl}/v2/transcript/${transcriptId}`;

    while (true) {
      const pollingResponse = await axios.get(pollingEndpoint, { headers });
      const transcriptionResult = pollingResponse.data;

      if (transcriptionResult.status === "completed") {
        console.log(`\nFull Transcript:\n\n${transcriptionResult.text}\n`);
        break;
      } else if (transcriptionResult.status === "error") {
        throw new Error(`Transcription failed: ${transcriptionResult.error}`);
      } else {
        await new Promise((resolve) => setTimeout(resolve, 3000));
      }
    }
  } catch (error) {
    console.error(error.message);
  }
}

transcribe();


Chave da API: 3f63a916c36c417cae2fcec5aba82c56